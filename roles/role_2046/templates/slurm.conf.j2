# ===slurmctld configuration

ClusterName=cluster
SlurmctldHost={{ control_node_list | map(attribute='virtual_machine_name') | join(',') }}
SlurmctldParameters=enable_configless
AuthType=auth/munge
AuthInfo=cred_expire=2400
#DisableRootJobs=NO
#EnforcePartLimits=NO
Epilog=/etc/slurm/epilog.sh
#EpilogSlurmctld=
#FirstJobId=1
#MaxJobId=67043328
GresTypes=gpu
#GroupUpdateForce=0
#GroupUpdateTime=600
#JobFileAppend=0
#JobRequeue=1
#JobSubmitPlugins=lua
#KillOnBadExit=0
#LaunchType=launch/slurm
LaunchParameters=use_interactive_step,ulimit_pam_adopt
#Licenses=foo*4,bar
MailProg=/usr/local/bin/mail_wrapper.sh
#MaxJobCount=10000
#MaxStepCount=40000
#MaxTasksPerNode=512
MpiDefault=none
#MpiParams=ports=#-#
#PluginDir=
#PlugStackConfig=
#PrivateData=jobs
ProctrackType=proctrack/cgroup
Prolog=/etc/slurm/prolog.sh
PrologFlags=Alloc,Contain
#PrologSlurmctld=
#PropagatePrioProcess=0
#PropagateResourceLimits=
PropagateResourceLimitsExcept=MEMLOCK
#RebootProgram=
ReturnToService=1
SlurmctldPidFile=/var/run/slurmctld.pid
SlurmctldPort=6817
SlurmdPidFile=/var/run/slurmd.pid
SlurmdPort=6818
SlurmdSpoolDir=/var/spool/slurmd
SlurmUser=slurm
SlurmdUser=root
#SrunEpilog=
#SrunProlog=
StateSaveLocation=/var/spool/slurmctld
SwitchType=switch/none
#TaskEpilog=
TaskPlugin=task/cgroup
#TaskProlog=
#TopologyPlugin=topology/tree
#TmpFS=/tmp
#TrackWCKey=no
#TreeWidth=
#UnkillableStepProgram=
#UsePAM=0
#
#
# TIMERS
#BatchStartTimeout=10
#CompleteWait=0
#EpilogMsgTime=2000
#GetEnvTimeout=2
#HealthCheckInterval=0
#HealthCheckProgram=
InactiveLimit=0
KillWait=30
#MessageTimeout=10
#ResvOverRun=0
MinJobAge=300
#OverTimeLimit=0
SlurmctldTimeout=120
SlurmdTimeout=300
#UnkillableStepTimeout=60
#VSizeFactor=0
Waittime=0
#
#
# SCHEDULING
#DefMemPerCPU=0
#MaxMemPerCPU=0
#SchedulerTimeSlice=30
SchedulerType=sched/backfill
SchedulerParameters=salloc_wait_nodes
SelectType=select/cons_tres
SelectTypeParameters=CR_Core
#
#
# JOB PRIORITY
#PriorityFlags=
#PriorityType=priority/multifactor
#PriorityDecayHalfLife=
#PriorityCalcPeriod=
#PriorityFavorSmall=
#PriorityMaxAge=
#PriorityUsageResetPeriod=
#PriorityWeightAge=
#PriorityWeightFairshare=
#PriorityWeightJobSize=
#PriorityWeightPartition=
#PriorityWeightQOS=
#
#
# LOGGING AND ACCOUNTING
AccountingStorageEnforce=limits,qos
AccountingStorageHost={{ control_node_list[0].virtual_machine_name }}
#AccountingStoragePass=
AccountingStoragePort=6819
AccountingStorageType=accounting_storage/slurmdbd
#AccountingStorageUser=
#AccountingStoreFlags=
#JobCompHost=
#JobCompLoc=slurm_jobcomp_db
#JobCompPass=
#JobCompPort=3306
#JobCompType=jobcomp/mysql
#JobCompUser=
#JobContainerType=
JobAcctGatherFrequency=30
JobAcctGatherType=jobacct_gather/cgroup
SlurmctldDebug=info
SlurmctldLogFile=/var/log/slurmctld.log
SlurmdDebug=info
SlurmdLogFile=/var/log/slurmd.log
#SlurmSchedLogFile=
#SlurmSchedLogLevel=
#DebugFlags=
#
#
# POWER SAVE SUPPORT FOR IDLE NODES (optional)
#SuspendProgram=
#ResumeProgram=
#SuspendTimeout=
#ResumeTimeout=
#ResumeRate=
#SuspendExcNodes=
#SuspendExcParts=
#SuspendRate=
#SuspendTime=
#
#
# NODES
{% for c in login_node_list + compute_node_list %}
NodeName={{ c.virtual_machine_name }} CPUs={{ hostvars[c.real_machine_name].hardware_info.CPUs }} RealMemory={{ virtual_machines[c.virtual_machine_name].memory * 1024 }} Boards={{ hostvars[c.real_machine_name].hardware_info.Boards }} SocketsPerBoard={{ hostvars[c.real_machine_name].hardware_info.SocketsPerBoard }} CoresPerSocket={{ hostvars[c.real_machine_name].hardware_info.CoresPerSocket }} ThreadsPerCore={{ hostvars[c.real_machine_name].hardware_info.ThreadsPerCore }} {% if virtual_machines[c.virtual_machine_name].gpu_num is defined and virtual_machines[c.virtual_machine_name].gpu_num > 0 and hostvars[c.real_machine_name].hardware_info.GPU.type is not none %}Gres=gpu:{{ hostvars[c.real_machine_name].hardware_info.GPU.type }}:{{ virtual_machines[c.virtual_machine_name].gpu_num }}{% endif %} State=UNKNOWN
{% endfor %}


{% for partition in slurm_partitions %}
PartitionName={{ partition.name }}{% for key, value in partition.items() if key != 'name' %} {{ key }}={{ value }}{% endfor %}

{% endfor %}