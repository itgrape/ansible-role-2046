---

- name: Stop container
  hosts: all
  tasks:
    - name: Ensure containers are stopped and removed if running
      podman_container:
        name: "{{ item }}"
        state: absent
      loop: "{{ containers }}"

- name: Manage podman macvlan network
  hosts: all:!login
  tasks:
    - name: Remove existing macvlan network if it exists
      shell: |
        if podman network ls | grep -q macvlan-"{{ network_parent }}"; then
            podman network rm macvlan-"{{ network_parent }}"
        fi
    - name: Create new macvlan network
      shell: |
        podman network create \
            --driver macvlan \
            --subnet="{{ network_subnet }}" \
            --gateway="{{ network_gateway }}" \
            -o parent="{{ network_parent }}" \
            macvlan-"{{ network_parent }}"
- name: Manage login podman macvlan network
  hosts: login
  tasks:
    - name: Remove existing macvlan network if it exists
      shell: |
        if podman network ls | grep -q macvlan-"{{ network_parent }}"; then
            podman network rm macvlan-"{{ network_parent }}"
        fi
        if podman network ls | grep -q macvlan-"{{ network_outer_parent }}"; then
            podman network rm macvlan-"{{ network_outer_parent }}"
        fi
    - name: Create new macvlan network
      shell: |
        podman network create \
            --driver macvlan \
            --subnet="{{ network_subnet }}" \
            --gateway="{{ network_gateway }}" \
            -o parent="{{ network_parent }}" \
            macvlan-"{{ network_parent }}"
        podman network create \
            --driver macvlan \
            --subnet="{{ network_outer_subnet }}" \
            --gateway="{{ network_outer_gateway }}" \
            -o parent="{{ network_outer_parent }}" \
            macvlan-"{{ network_outer_parent }}"

- name: Create volume
  hosts: login,compute
  tasks:
    - name: Get the NFS address based on volume_id
      set_fact:
        nfs_address: "{{ nfs_addresses[volume_id | int - 1] }}"
    - name: Create a new podman volume using NFS
      podman_volume:
        name: nas_volume
        driver: local
        opts:
          type: nfs
          o: rw
          device: "{{ nfs_address }}:/ifs"
        state: present

